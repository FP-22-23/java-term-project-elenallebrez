package baseball;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Baseball2 {
	private Set<Baseball> matches;
	
	public Baseball2() {
		matches = new HashSet<Baseball>();
	}
	
	public Baseball2(Stream<Baseball>sw) {
		matches = sw.collect(Collectors.toSet());
	}

	@Override
	public int hashCode() {
		return Objects.hash(matches);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Baseball2 other = (Baseball2) obj;
		return Objects.equals(matches, other.matches);
	}
	
	public Set<Baseball> getSetBaseball(){
		return matches;
	}
	
	public int sizematches() {
		return matches.size();
	}
	
	public void addmatches() {
		matches.add(null);
	}
	
	public void addcollectionmatches() {
		matches.addAll(matches);
	}
	public void removemotches() {
		matches.remove(null);
	}
	
	public Integer counterevent(String event) {
		Integer res =0;
		for (Baseball b: matches) {
			if(b.getSetBaseball.contains(matches)) {
				res++;
			}
			
		}		
	}
	
	//for each
	public Boolean fastSpeed(Double speed) {
		Boolean res = false;
		for(Baseball b: matches) {
			if(b.getSetBaseball().contains(matches)) {
				res = true;
				break;
			}
		}
	}
	//filter
	public List<String> playerWiThrows(String player){
		List<String> res = new ArrayList<>();
		for(Baseball b: matches) {
			if(b.getSetBaseball().contains(player)) {
				res.add(b.getThrows());
			}
		}
	}
	//MAP
	
	//keys are properties and values are count
	public Map<String, Double> getTimesHomeTeam(){
		Map<String ,Double> res = new HashMap<>();
		for (Baseball b: matches) {
			if (res.keySet().contains(b.matches().getHome_team())) {
				res.put(b.matches().getHome_team(), res.get(b.matches().getHome_team())+1);
			}
			else {
				res.put(b.matches().home_team(), 1);
			}
		}
		return res;
	}
	
	//keys are properties and values are collections
	public Map<String, List<Double>> speedPlayers(){
		 Map<String, List<Double>> res = new HashMap<>();
		 for (Baseball b: matches) {
			 if (res.keySet().contains(b.matches().getPlayer())) {
					res.get(b.matches().getPlayer()).add(b.getSpeed());
				}
			 else {
				 List<Double> mylist = new ArrayList();
				 mylist.add(b.getSpeed());
				 res.put(b.matches.getPlayer, mylist);
			 }
		 }
		 return res;
	}
	
	public Boolean fastSpeedS(Double speed) {
		return matches.stream()
				.anyMatch(x-> speed >= x.getSpeed());
	}
	
	public Long countereventS(String homeTeam) {
		return matches.stream()
				.filter(x-> homeTeam.equals(x.getHome_team()))
				.count();
	}

	public List<Baseball> playerWiThrowsS(Types type){
		return matches.stream()
				.filter(x-> type.equals(x.getType()))
				.collect(Collectors.toList());
	}

	public Double maxSpeed() {
	    return matches.stream()
	            .map(Baseball::getSpeed)
	            .max(Comparator.naturalOrder())
	            .orElse(0.0);
	}
	public List<Double> minSpeed2() {
	    return matches.stream()
	            .map(Baseball::getSpeed)
	            .sorted(Comparator.naturalOrder())
	            .limit(3)
	            .collect(Collectors.toList());
	}
	
	public Map<String, Integer> getTimesHomeTeamS() {
	    return matches.stream()
	            .collect(Collectors.groupingBy(Baseball::getHome_team, Collectors.summingInt(e -> 1)));
	}

	public Map<String, List<Double>> speedPlayersS() {
	    return matches.stream()
	            .collect(Collectors.groupingBy(Baseball::getPlayer,
	                    Collectors.mapping(Baseball::getSpeed, Collectors.toList())));
	}
	
	public Map<Types, Double> minSpeedPerType(Integer year) {
	    Map<Types, List<Baseball>> speedPerTypes = matches.stream()
	            .filter(p -> p.getDate().getYear()== year)
	            .collect(Collectors.groupingBy(Baseball::getType));

	    return speedPerTypes.entrySet().stream()
	            .collect(Collectors.toMap(Map.Entry::getKey, e -> minSpeed(e.getValue())));
	}

	private Double minSpeed(List<Baseball> list) {
	    return list.stream()
	            .min(Comparator.comparing(Baseball::getSpeed))
	            .map(Baseball::getSpeed)
	            .orElse(0.0);
	}

    public SortedMap<Double, List<Baseball>> getTopNSpeeds(int n) {
        return matches.stream()
                .collect(Collectors.groupingBy(Baseball::getSpeed))
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))
                .limit(n)
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue,
                        (v1, v2) -> v1,
                        TreeMap::new));
    }
    public String getTeamWithMostHomeGames() {
        Map<String, Long> homeGameCounts = matches.stream()
                .collect(Collectors.groupingBy(Baseball::getHome_team, Collectors.counting()));

        return homeGameCounts.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse(null);
    }
    

}
